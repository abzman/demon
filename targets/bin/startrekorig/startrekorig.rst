                              1 ;****************************************************************
                              2 ; This file is auto-generated by ddmake from startrekorig.toml
                              3 ; *** DO NOT EDIT ***
                              4 ;****************************************************************
                              5 
                              6 ; Start of chip memory mapping
                     0000     7 STRTADD = 0x0000
                              8 
                              9 ; 2K ROM
                     0800    10 ROMSIZE = 0x0800
                             11 
                             12 ; The code actually needs 4 bytes ram at this address for the command buffer.
                             13 ; However, stack also starts here, and will grow down (towards 0) from this point.
                             14 ; So, we need some above and below this address.  I generally choose the
                             15 ; Top of RAM minus 16
                     CFF0    16 RAMADDR = 0xcff0
                             17 
                             18 ; delay factor
                     0180    19 BIGDEL = 0x0180
                             20 
                             21         .include "../core/dd.def"
                              1 
                     0800     2 ROMEND  .equ    STRTADD+ROMSIZE
                              3 
                              4 
                             22         .include "../core/z80.def"
                              1 ; Same for all Z80s
                     0038     2 IRQADD  .equ    0x0038      ; location of IRQ handler
                     0066     3 NMIADD  .equ    0x0066      ; location of NMI handler
                             23 
                             24 ;------- region1  -----------------------------------------------
                             25 
                             26         .bank   region1 (base=STRTADD, size=IRQADD-STRTADD)
                             27         .area   region1 (ABS, BANK=region1)
                             28 
                             29 ;
                             30 ;       START CODE
                             31 ;
   0000                      32 START:
   0000 F3            [ 4]   33         DI                  ; Disable interrupts - we don't handle them
   0001 31 F0 CF      [10]   34         LD      SP,RAMADDR  ; have to set valid SP
                             35 ;       YOUR SMALL CODE CAN GO HERE
   0004 C3 68 00      [10]   36         JP      START2
                             37 
                             38 
                             39 ;------- region2  -----------------------------------------------
                             40 
                             41         .bank   region2 (base=IRQADD, size=NMIADD-IRQADD)
                             42         .area   region2 (ABS, BANK=region2)
                             43 
                             44 ;
                             45 ;       IRQ HANDLER
                             46 ;
   0038                      47 IRQ:
   0038 ED 4D         [14]   48         RETI
                             49 
                             50 
                             51 ;------- region3  -----------------------------------------------
                             52 
                             53         .bank   region3 (base=NMIADD, size=ROMEND-NMIADD)
                             54         .area   region3 (ABS, BANK=region3)
                             55 
                             56 ;
                             57 ;       NMI HANDLER
                             58 ;
   0066                      59 NMI:
   0066 ED 45         [14]   60         RETN
                             61 
                             62 ;
                             63 ;       START CODE 2
                             64 ;
   0068                      65 START2:
   0068 3E 81         [ 7]   66         LD      A,0x81
   006A 21 00 E0      [10]   67         LD      HL,0xE000
   006D 77            [ 7]   68         LD      (HL),A      ; blank the screen
   006E C3 71 00      [10]   69         JP      INIT
                             70 
                             71         .include "../core/z80_main.asm"
                              1 ; I2C ADDRESSING
                     0011     2 I2CRADR .equ    0x11        ; I2C read address  - I2C address 0x08
                     0010     3 I2CWADR .equ    0x10        ; I2C write address - I2C address 0x08
                              4 
                              5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              6 ; RAM Variables	
                              7 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              8 
                     CFF0     9 CMDBUF  .equ    RAMADDR     ; Need only 4 bytes of ram for command buffer
                             10 
   0071                      11 INIT:
   0071 DD 21 F0 CF   [14]   12         LD      IX,CMDBUF   ; Easy to index command buffer
   0075 16 00         [ 7]   13         LD      D,#0x00     ; initialize D to prevent index overflow
                             14 
                             15 ; Main routine
   0077                      16 MAIN:
   0077 CD 7D 01      [17]   17         CALL    EVERY
   007A CD 20 01      [17]   18         CALL    POLL
   007D DA 77 00      [10]   19         JP      C,MAIN
                             20         
   0080 01 80 01      [10]   21         LD      BC,BIGDEL
   0083                      22 DLOOP:
   0083 0B            [ 6]   23         DEC     BC
   0084 79            [ 4]   24         LD      A,C
   0085 B0            [ 4]   25         OR      B
   0086 C2 83 00      [10]   26         JP      NZ,DLOOP
   0089 C3 77 00      [10]   27         JP      MAIN
                             28 
                             29 ; Delay for half a bit time
   008C                      30 I2CDELAY:
   008C C9            [10]   31         RET     ; This is plenty
                             32 
                             33 ; I2C Start Condition
                             34 ; Uses HL
                             35 ; Destroys A
   008D                      36 I2CSTART:
   008D CD 99 01      [17]   37         CALL    CLRSDA      
   0090 CD 88 01      [17]   38         CALL    CLRSCL
   0093 C9            [10]   39         RET
                             40 
                             41 ; I2C Stop Condition
                             42 ; Uses HL
                             43 ; Destroys A
   0094                      44 I2CSTOP:
   0094 CD 99 01      [17]   45         CALL    CLRSDA
   0097 CD 7E 01      [17]   46         CALL    SETSCL
   009A CD 8F 01      [17]   47         CALL    SETSDA
   009D C9            [10]   48         RET
                             49 
                             50 ; I2C Read Bit routine
                             51 ; Returns bit in carry blag
                             52 ; Destroys A
   009E                      53 I2CRBIT:
   009E CD 8F 01      [17]   54         CALL    SETSDA
   00A1 CD 7E 01      [17]   55         CALL    SETSCL
   00A4 CD A3 01      [17]   56         CALL    READSDA
   00A7 F5            [11]   57         PUSH    AF          ; save carry flag
   00A8 CD 88 01      [17]   58         CALL    CLRSCL
   00AB F1            [10]   59         POP     AF          ; rv in carry flag
   00AC C9            [10]   60         RET
                             61 
                             62 ; I2C Write Bit routine
                             63 ; Takes carry flag
                             64 ; Destroys A
   00AD                      65 I2CWBIT:
   00AD 30 05         [12]   66         JR      NC,DOCLR
   00AF CD 8F 01      [17]   67         CALL    SETSDA
   00B2 18 03         [12]   68         JR      AHEAD
   00B4                      69 DOCLR:
   00B4 CD 99 01      [17]   70         CALL    CLRSDA
   00B7                      71 AHEAD:
   00B7 CD 7E 01      [17]   72         CALL    SETSCL
   00BA CD 88 01      [17]   73         CALL    CLRSCL
   00BD C9            [10]   74         RET
                             75 
                             76 ; I2C Write Byte routine
                             77 ; Takes A
                             78 ; Destroys B
                             79 ; Returns carry bit
   00BE                      80 I2CWBYTE:
   00BE 06 08         [ 7]   81         LD      B,8
   00C0                      82 ILOOP:
   00C0 C5            [11]   83         PUSH    BC          ; save B
   00C1 CB 07         [ 8]   84         RLC     A    
   00C3 F5            [11]   85         PUSH    AF          ; save A
   00C4 CD AD 00      [17]   86         CALL    I2CWBIT
   00C7 F1            [10]   87         POP     AF
   00C8 C1            [10]   88         POP     BC
   00C9 10 F5         [13]   89         DJNZ    ILOOP
   00CB CD 9E 00      [17]   90         CALL    I2CRBIT
   00CE C9            [10]   91         RET
                             92 
                             93 ; I2C Read Byte routine
                             94 ; Destroys BC
                             95 ; Returns A
   00CF                      96 I2CRBYTE:
   00CF 06 08         [ 7]   97         LD      B,8
   00D1 0E 00         [ 7]   98         LD      C,0
   00D3                      99 LOOP3:
   00D3 C5            [11]  100         PUSH    BC
   00D4 CD 9E 00      [17]  101         CALL    I2CRBIT     ; get bit in carry flag
   00D7 C1            [10]  102         POP     BC
   00D8 CB 11         [ 8]  103         RL      C           ; rotate carry into bit0 of C register
   00DA 10 F7         [13]  104         DJNZ    LOOP3
   00DC AF            [ 4]  105         XOR     A           ; clear carry flag              
   00DD C5            [11]  106         PUSH    BC
   00DE CD AD 00      [17]  107         CALL    I2CWBIT
   00E1 C1            [10]  108         POP     BC
   00E2 79            [ 4]  109         LD      A,C
   00E3 C9            [10]  110         RET
                            111 ;
                            112 
                            113 ; Read 4-byte I2C Command from device into CMDBUF
                            114 ; Uses HL
                            115 ; Destroys A,BC,HL
   00E4                     116 I2CRREQ:
   00E4 CD 8D 00      [17]  117         CALL    I2CSTART
   00E7 3E 11         [ 7]  118         LD      A,I2CRADR
   00E9 CD BE 00      [17]  119         CALL    I2CWBYTE
   00EC 38 1A         [12]  120         JR      C,SKIP
   00EE CD CF 00      [17]  121         CALL    I2CRBYTE
   00F1 DD 77 00      [19]  122         LD      (IX),A
   00F4 CD CF 00      [17]  123         CALL    I2CRBYTE
   00F7 DD 77 01      [19]  124         LD      (IX+1),A  
   00FA CD CF 00      [17]  125         CALL    I2CRBYTE
   00FD DD 77 02      [19]  126         LD      (IX+2),A
   0100 CD CF 00      [17]  127         CALL    I2CRBYTE
   0103 DD 77 03      [19]  128         LD      (IX+3),A
   0106 18 14         [12]  129         JR      ENDI2C
                            130     
   0108                     131 SKIP:                       ; If no device present, fake an idle response
   0108 3E 2E         [ 7]  132         LD      A,0x2e  ; '.'
   010A DD 77 00      [19]  133         LD      (IX),A
   010D 18 0D         [12]  134         JR      ENDI2C
                            135 
   010F                     136 I2CSRESP:
   010F F5            [11]  137         PUSH    AF
   0110 CD 8D 00      [17]  138         CALL    I2CSTART
   0113 3E 10         [ 7]  139         LD      A,I2CWADR
   0115 CD BE 00      [17]  140         CALL    I2CWBYTE
   0118 F1            [10]  141         POP     AF
   0119 CD BE 00      [17]  142         CALL    I2CWBYTE
   011C                     143 ENDI2C:
   011C CD 94 00      [17]  144         CALL    I2CSTOP
   011F C9            [10]  145         RET
                            146 ;
                            147 
                            148 ; Main Polling loop
                            149 ; Return carry flag if we got a valid command (not idle)
   0120                     150 POLL:
   0120 CD E4 00      [17]  151         CALL    I2CRREQ
   0123 DD 7E 00      [19]  152         LD      A,(IX)
   0126 FE 52         [ 7]  153         CP      0x52    ; 'R' - Read memory
   0128 28 1B         [12]  154         JR      Z,MREAD
   012A FE 57         [ 7]  155         CP      0x57    ; 'W' - Write memory
   012C 28 1D         [12]  156         JR      Z,MWRITE
   012E FE 49         [ 7]  157         CP      0x49    ; 'I' - Input from port
   0130 28 2D         [12]  158         JR      Z,PREAD
   0132 FE 4F         [ 7]  159         CP      0x4F    ; 'O' - Output from port
   0134 28 30         [12]  160         JR      Z,PWRITE
   0136 FE 43         [ 7]  161         CP      0x43    ; 'C' - Call subroutine
   0138 28 3B         [12]  162         JR      Z,REMCALL
   013A 3F            [ 4]  163         CCF
   013B C9            [10]  164         RET
   013C                     165 LOADHL:
   013C DD 7E 01      [19]  166         LD      A,(IX+1)
   013F 67            [ 4]  167         LD      H,A
   0140 DD 7E 02      [19]  168         LD      A,(IX+2)
   0143 6F            [ 4]  169         LD      L,A
   0144 C9            [10]  170         RET    
   0145                     171 MREAD:
   0145 CD 56 01      [17]  172         CALL    LOADBC
   0148 0A            [ 7]  173         LD      A,(BC)
   0149 18 25         [12]  174         JR      SRESP
   014B                     175 MWRITE:
   014B CD 56 01      [17]  176         CALL    LOADBC
   014E DD 7E 03      [19]  177         LD      A,(IX+3)
   0151 02            [ 7]  178         LD      (BC),A
   0152 3E 57         [ 7]  179         LD      A,0x57  ;'W'
   0154 18 1A         [12]  180         JR      SRESP
   0156                     181 LOADBC:
   0156 DD 7E 01      [19]  182         LD      A,(IX+1)
   0159 47            [ 4]  183         LD      B,A
   015A DD 7E 02      [19]  184         LD      A,(IX+2)
   015D 4F            [ 4]  185         LD      C,A
   015E C9            [10]  186         RET
   015F                     187 PREAD:
   015F CD 56 01      [17]  188         CALL    LOADBC
   0162 ED 78         [12]  189         IN      A,(C)
   0164 18 0A         [12]  190         JR      SRESP
   0166                     191 PWRITE:
   0166 CD 56 01      [17]  192         CALL    LOADBC
   0169 DD 7E 03      [19]  193         LD      A,(IX+3)
   016C ED 79         [12]  194         OUT     (C),A
   016E 3E 4F         [ 7]  195         LD      A,0x4F  ;'O'
   0170                     196 SRESP:
   0170 CD 0F 01      [17]  197         CALL    I2CSRESP
   0173                     198 RHERE:
   0173 37            [ 4]  199         SCF
   0174 C9            [10]  200         RET
   0175                     201 REMCALL:
   0175 21 00 00      [10]  202         LD      HL,START
   0178 E5            [11]  203         PUSH    HL
   0179 CD 3C 01      [17]  204         CALL    LOADHL
   017C E9            [ 4]  205         JP      (HL)
                            206 
                             72 ;
                             73 ;       EVERY CODE
                             74 ;
   017D                      75 EVERY:
                             76 ;       YOUR CODE CAN GO HERE
   017D C9            [10]   77         RET
                             78 
                             79         .include "../io/startrek-tether.asm"
                              1 ; SCL  - OUT F9, bit7, (0x80) coin counter 1, pin 5, U11 - R1
                              2 ; DOUT - OUT F9, bit6, (0x40) coin counter 2, pin 9, U11 - R3
                              3 ; DIN  - IN  F8, bit3, (0x08) DIP, SW1, pin9, U2-pin 6
                              4 ;
                              5 ; Note: We cannot use opcode 0x32 on this platform, or it will trigger
                              6 ;       the security chip
                              7 ;
                              8 
                     00F8     9 DSPORT  .equ    0xf8        ; dip switch 1 port
                     00F9    10 CCPORT  .equ    0xf9        ; port for count counters
                             11 
                             12 ; Set the SCL pin high
                             13 ; D is the global coin counter buffer
                             14 ; Destroys A
   017E                      15 SETSCL:
   017E 7A            [ 4]   16         LD      A,D
   017F F6 80         [ 7]   17         OR      0x80
   0181 57            [ 4]   18         LD      D,A
   0182 D3 F9         [11]   19         OUT     (CCPORT),A
   0184 CD 8C 00      [17]   20         CALL    I2CDELAY
   0187 C9            [10]   21         RET
                             22     
                             23 ; Set the SCL pin low
                             24 ; D is the global coin counter buffer
                             25 ; Destroys A
   0188                      26 CLRSCL:
   0188 7A            [ 4]   27         LD      A,D
   0189 E6 7F         [ 7]   28         AND     0x7F
   018B 57            [ 4]   29         LD      D,A
   018C D3 F9         [11]   30         OUT     (CCPORT),A
   018E C9            [10]   31         RET
                             32 
                             33 ; Set the DOUT pin low
                             34 ; D is the global coin counter buffer
                             35 ; Destroys A 
   018F                      36 SETSDA:
   018F 7A            [ 4]   37         LD      A,D
   0190 E6 BF         [ 7]   38         AND     0xBF
   0192 57            [ 4]   39         LD      D,A
   0193 D3 F9         [11]   40         OUT     (CCPORT),A
   0195 CD 8C 00      [17]   41         CALL    I2CDELAY
   0198 C9            [10]   42         RET
                             43 
                             44 ; Set the DOUT pin high
                             45 ; D is the global coin counter buffer
                             46 ; Destroys A  
   0199                      47 CLRSDA:
   0199 7A            [ 4]   48         LD      A,D
   019A F6 40         [ 7]   49         OR      0x40
   019C 57            [ 4]   50         LD      D,A
   019D D3 F9         [11]   51         OUT     (CCPORT),A
   019F CD 8C 00      [17]   52         CALL    I2CDELAY
   01A2 C9            [10]   53         RET
                             54 
                             55 ; Read the DIN pin 
                             56 ; returns bit in carry flag    
   01A3                      57 READSDA:
   01A3 DB F8         [11]   58         IN      A,(DSPORT)  ;0x08
   01A5 CB 3F         [ 8]   59         SRL     A           ;0x04
   01A7 CB 3F         [ 8]   60         SRL     A           ;0x02
   01A9 CB 3F         [ 8]   61         SRL     A           ;0x01
   01AB CB 3F         [ 8]   62         SRL     A           ;carry flag
   01AD C9            [10]   63         RET
                             80 
