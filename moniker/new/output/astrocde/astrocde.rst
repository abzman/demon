                              1 ;****************************************************************
                              2 ; This file is auto-generated by ddmake from astrocde.toml
                              3 ; *** DO NOT EDIT ***
                              4 ;****************************************************************
                              5 
                              6 ; Start of chip memory mapping
                     2000     7 STRTADD = 0x2000
                              8 
                              9 ; 2K ROM
                     0800    10 ROMSIZE = 0x0800
                             11 
                             12 ; The code actually needs 4 bytes ram at this address for the command buffer.
                             13 ; In this case, the stack is elsewhere, set by the Astrocade BIOS
                             14 ; 
                     4FCE    15 RAMADDR = 0x4fce
                             16 
                             17 ; delay factor
                     0180    18 BIGDEL = 0x0180
                             19 
                             20         .include "../dd/dd.def"
                              1 
                     2800     2 ROMEND  .equ    STRTADD+ROMSIZE
                              3 
                              4 
                             21         .include "../dd/z80.def"
                              1 ; Same for all Z80s
                     0038     2 IRQADD  .equ    0x0038      ; location of IRQ handler
                     0066     3 NMIADD  .equ    0x0066      ; location of NMI handler
                             22         .include "../io/romio.def"
                              1 ; For Demon Debugger Hardware - Rev D 
                              2 
                     27A0     3 IOREGR   .equ   STRTADD+0x07a0    ;reserved region for IO READ
                     27C0     4 IOREGW   .equ   STRTADD+0x07c0    ;reserved region for IO WRITE
                              5 
                     27A0     6 IOADD    .equ   IOREGR            ;start of region
                     27E0     7 IOEND    .equ   STRTADD+0x07e0    ;end of region
                             23 
                             24 ;------- region1  -----------------------------------------------
                             25 
                             26         .bank   region1 (base=STRTADD, size=IOADD-STRTADD)
                             27         .area   region1 (ABS, BANK=region1)
                             28 
   2000 55                   29         .byte   0x55        ; cartridge header
   2001 18 02                30         .word   0x0218      ; next menu item (first one)
   2003 19 20                31         .word   TITLE       ; title pointer
   2005 28 20                32         .word   START       ; start pointer
                             33         
   2007 C9            [10]   34         ret                 ; rst8
   2008 00            [ 4]   35         nop
   2009 00            [ 4]   36         nop
                             37 
   200A C9            [10]   38         ret                 ; rst16
   200B 00            [ 4]   39         nop
   200C 00            [ 4]   40         nop
                             41         
   200D C9            [10]   42         ret                 ; rst24
   200E 00            [ 4]   43         nop
   200F 00            [ 4]   44         nop
                             45         
   2010 C9            [10]   46         ret                 ; rst32
   2011 00            [ 4]   47         nop
   2012 00            [ 4]   48         nop
                             49         
   2013 C9            [10]   50         ret                 ; rst40
   2014 00            [ 4]   51         nop
   2015 00            [ 4]   52         nop
                             53         
   2016 C9            [10]   54         ret                 ; rst48
   2017 00            [ 4]   55         nop
   2018 00            [ 4]   56         nop
                             57 
   2019                      58 TITLE:
   2019 44 45 4D 4F 4E 20    59         .asciz	"DEMON DEBUGGER"
        44 45 42 55 47 47
        45 52 00
                             60 
                             61 ;
                             62 ;       START CODE
                             63 ;
   2028                      64 START:
                             65 ;
                             66 ;       Assume the stack and the interrupt states are
                             67 ;       set up properly, by the Astrocade BIOS.
                             68 ;       Comment out normal startup code
                             69 ;
                             70         ;DI                  ; Disable interrupts - we don't handle them
                             71         ;LD      SP,RAMADDR  ; have to set valid SP
   2028 C3 2B 20      [10]   72         JP       INIT
                             73 
                             74         .include "../dd/z80_main.asm"
                              1 ; I2C ADDRESSING
                     0011     2 I2CRADR .equ    0x11        ; I2C read address  - I2C address 0x08
                     0010     3 I2CWADR .equ    0x10        ; I2C write address - I2C address 0x08
                              4 
                              5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              6 ; RAM Variables	
                              7 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              8 
                     4FCE     9 CMDBUF  .equ    RAMADDR     ; Need only 4 bytes of ram for command buffer
                             10 
   202B                      11 INIT:
   202B DD 21 CE 4F   [14]   12         LD      IX,CMDBUF   ; Easy to index command buffer
   202F 16 00         [ 7]   13         LD      D,#0x00     ; initialize D to prevent index overflow
                             14 
                             15 ; Main routine
   2031                      16 MAIN:
   2031 CD 37 21      [17]   17         CALL    EVERY
   2034 CD DA 20      [17]   18         CALL    POLL
   2037 DA 31 20      [10]   19         JP      C,MAIN
                             20         
   203A 01 80 01      [10]   21         LD      BC,BIGDEL
   203D                      22 DLOOP:
   203D 0B            [ 6]   23         DEC     BC
   203E 79            [ 4]   24         LD      A,C
   203F B0            [ 4]   25         OR      B
   2040 C2 3D 20      [10]   26         JP      NZ,DLOOP
   2043 C3 31 20      [10]   27         JP      MAIN
                             28 
                             29 ; Delay for half a bit time
   2046                      30 I2CDELAY:
   2046 C9            [10]   31         RET     ; This is plenty
                             32 
                             33 ; I2C Start Condition
                             34 ; Uses HL
                             35 ; Destroys A
   2047                      36 I2CSTART:
   2047 CD 67 21      [17]   37         CALL    CLRSDA      
   204A CD 4A 21      [17]   38         CALL    CLRSCL
   204D C9            [10]   39         RET
                             40 
                             41 ; I2C Stop Condition
                             42 ; Uses HL
                             43 ; Destroys A
   204E                      44 I2CSTOP:
   204E CD 67 21      [17]   45         CALL    CLRSDA
   2051 CD 3A 21      [17]   46         CALL    SETSCL
   2054 CD 57 21      [17]   47         CALL    SETSDA
   2057 C9            [10]   48         RET
                             49 
                             50 ; I2C Read Bit routine
                             51 ; Returns bit in carry blag
                             52 ; Destroys A
   2058                      53 I2CRBIT:
   2058 CD 57 21      [17]   54         CALL    SETSDA
   205B CD 3A 21      [17]   55         CALL    SETSCL
   205E CD 77 21      [17]   56         CALL    READSDA
   2061 F5            [11]   57         PUSH    AF          ; save carry flag
   2062 CD 4A 21      [17]   58         CALL    CLRSCL
   2065 F1            [10]   59         POP     AF          ; rv in carry flag
   2066 C9            [10]   60         RET
                             61 
                             62 ; I2C Write Bit routine
                             63 ; Takes carry flag
                             64 ; Destroys A
   2067                      65 I2CWBIT:
   2067 30 05         [12]   66         JR      NC,DOCLR
   2069 CD 57 21      [17]   67         CALL    SETSDA
   206C 18 03         [12]   68         JR      AHEAD
   206E                      69 DOCLR:
   206E CD 67 21      [17]   70         CALL    CLRSDA
   2071                      71 AHEAD:
   2071 CD 3A 21      [17]   72         CALL    SETSCL
   2074 CD 4A 21      [17]   73         CALL    CLRSCL
   2077 C9            [10]   74         RET
                             75 
                             76 ; I2C Write Byte routine
                             77 ; Takes A
                             78 ; Destroys B
                             79 ; Returns carry bit
   2078                      80 I2CWBYTE:
   2078 06 08         [ 7]   81         LD      B,8
   207A                      82 ILOOP:
   207A C5            [11]   83         PUSH    BC          ; save B
   207B CB 07         [ 8]   84         RLC     A    
   207D F5            [11]   85         PUSH    AF          ; save A
   207E CD 67 20      [17]   86         CALL    I2CWBIT
   2081 F1            [10]   87         POP     AF
   2082 C1            [10]   88         POP     BC
   2083 10 F5         [13]   89         DJNZ    ILOOP
   2085 CD 58 20      [17]   90         CALL    I2CRBIT
   2088 C9            [10]   91         RET
                             92 
                             93 ; I2C Read Byte routine
                             94 ; Destroys BC
                             95 ; Returns A
   2089                      96 I2CRBYTE:
   2089 06 08         [ 7]   97         LD      B,8
   208B 0E 00         [ 7]   98         LD      C,0
   208D                      99 LOOP3:
   208D C5            [11]  100         PUSH    BC
   208E CD 58 20      [17]  101         CALL    I2CRBIT     ; get bit in carry flag
   2091 C1            [10]  102         POP     BC
   2092 CB 11         [ 8]  103         RL      C           ; rotate carry into bit0 of C register
   2094 10 F7         [13]  104         DJNZ    LOOP3
   2096 AF            [ 4]  105         XOR     A           ; clear carry flag              
   2097 C5            [11]  106         PUSH    BC
   2098 CD 67 20      [17]  107         CALL    I2CWBIT
   209B C1            [10]  108         POP     BC
   209C 79            [ 4]  109         LD      A,C
   209D C9            [10]  110         RET
                            111 ;
                            112 
                            113 ; Read 4-byte I2C Command from device into CMDBUF
                            114 ; Uses HL
                            115 ; Destroys A,BC,HL
   209E                     116 I2CRREQ:
   209E CD 47 20      [17]  117         CALL    I2CSTART
   20A1 3E 11         [ 7]  118         LD      A,I2CRADR
   20A3 CD 78 20      [17]  119         CALL    I2CWBYTE
   20A6 38 1A         [12]  120         JR      C,SKIP
   20A8 CD 89 20      [17]  121         CALL    I2CRBYTE
   20AB DD 77 00      [19]  122         LD      (IX),A
   20AE CD 89 20      [17]  123         CALL    I2CRBYTE
   20B1 DD 77 01      [19]  124         LD      (IX+1),A  
   20B4 CD 89 20      [17]  125         CALL    I2CRBYTE
   20B7 DD 77 02      [19]  126         LD      (IX+2),A
   20BA CD 89 20      [17]  127         CALL    I2CRBYTE
   20BD DD 77 03      [19]  128         LD      (IX+3),A
   20C0 18 14         [12]  129         JR      ENDI2C
                            130     
   20C2                     131 SKIP:                       ; If no device present, fake an idle response
   20C2 3E 2E         [ 7]  132         LD      A,0x2e  ; '.'
   20C4 DD 77 00      [19]  133         LD      (IX),A
   20C7 18 0D         [12]  134         JR      ENDI2C
                            135 
   20C9                     136 I2CSRESP:
   20C9 F5            [11]  137         PUSH    AF
   20CA CD 47 20      [17]  138         CALL    I2CSTART
   20CD 3E 10         [ 7]  139         LD      A,I2CWADR
   20CF CD 78 20      [17]  140         CALL    I2CWBYTE
   20D2 F1            [10]  141         POP     AF
   20D3 CD 78 20      [17]  142         CALL    I2CWBYTE
   20D6                     143 ENDI2C:
   20D6 CD 4E 20      [17]  144         CALL    I2CSTOP
   20D9 C9            [10]  145         RET
                            146 ;
                            147 
                            148 ; Main Polling loop
                            149 ; Return carry flag if we got a valid command (not idle)
   20DA                     150 POLL:
   20DA CD 9E 20      [17]  151         CALL    I2CRREQ
   20DD DD 7E 00      [19]  152         LD      A,(IX)
   20E0 FE 52         [ 7]  153         CP      0x52    ; 'R' - Read memory
   20E2 28 1B         [12]  154         JR      Z,MREAD
   20E4 FE 57         [ 7]  155         CP      0x57    ; 'W' - Write memory
   20E6 28 1D         [12]  156         JR      Z,MWRITE
   20E8 FE 49         [ 7]  157         CP      0x49    ; 'I' - Input from port
   20EA 28 2D         [12]  158         JR      Z,PREAD
   20EC FE 4F         [ 7]  159         CP      0x4F    ; 'O' - Output from port
   20EE 28 30         [12]  160         JR      Z,PWRITE
   20F0 FE 43         [ 7]  161         CP      0x43    ; 'C' - Call subroutine
   20F2 28 3B         [12]  162         JR      Z,REMCALL
   20F4 3F            [ 4]  163         CCF
   20F5 C9            [10]  164         RET
   20F6                     165 LOADHL:
   20F6 DD 7E 01      [19]  166         LD      A,(IX+1)
   20F9 67            [ 4]  167         LD      H,A
   20FA DD 7E 02      [19]  168         LD      A,(IX+2)
   20FD 6F            [ 4]  169         LD      L,A
   20FE C9            [10]  170         RET    
   20FF                     171 MREAD:
   20FF CD 10 21      [17]  172         CALL    LOADBC
   2102 0A            [ 7]  173         LD      A,(BC)
   2103 18 25         [12]  174         JR      SRESP
   2105                     175 MWRITE:
   2105 CD 10 21      [17]  176         CALL    LOADBC
   2108 DD 7E 03      [19]  177         LD      A,(IX+3)
   210B 02            [ 7]  178         LD      (BC),A
   210C 3E 57         [ 7]  179         LD      A,0x57  ;'W'
   210E 18 1A         [12]  180         JR      SRESP
   2110                     181 LOADBC:
   2110 DD 7E 01      [19]  182         LD      A,(IX+1)
   2113 47            [ 4]  183         LD      B,A
   2114 DD 7E 02      [19]  184         LD      A,(IX+2)
   2117 4F            [ 4]  185         LD      C,A
   2118 C9            [10]  186         RET
   2119                     187 PREAD:
   2119 CD 10 21      [17]  188         CALL    LOADBC
   211C ED 78         [12]  189         IN      A,(C)
   211E 18 0A         [12]  190         JR      SRESP
   2120                     191 PWRITE:
   2120 CD 10 21      [17]  192         CALL    LOADBC
   2123 DD 7E 03      [19]  193         LD      A,(IX+3)
   2126 ED 79         [12]  194         OUT     (C),A
   2128 3E 4F         [ 7]  195         LD      A,0x4F  ;'O'
   212A                     196 SRESP:
   212A CD C9 20      [17]  197         CALL    I2CSRESP
   212D                     198 RHERE:
   212D 37            [ 4]  199         SCF
   212E C9            [10]  200         RET
   212F                     201 REMCALL:
   212F 21 28 20      [10]  202         LD      HL,START
   2132 E5            [11]  203         PUSH    HL
   2133 CD F6 20      [17]  204         CALL    LOADHL
   2136 E9            [ 4]  205         JP      (HL)
                            206 
                             75 ;
                             76 ;       EVERY CODE
                             77 ;
   2137                      78 EVERY:
   2137 DB 10         [11]   79         IN	A,(0x10)    ; hit watchdog
   2139 C9            [10]   80         RET
                             81 
                             82         .include "../io/z80_romio.asm"
                              1 
                              2 ; For Demon Debugger Hardware - Rev D 
                              3 
                              4 ; Set the SCL pin high
                              5 ; D is the global output buffer
                              6 ; Destroys A
   213A                       7 SETSCL:
   213A 7A            [ 4]    8         LD      A,D
   213B F6 01         [ 7]    9         OR      0x01
   213D 57            [ 4]   10         LD      D,A
   213E E5            [11]   11         PUSH    HL
   213F 26 27         [ 7]   12         LD      H,#>IOREGW
   2141 C6 C0         [ 7]   13         ADD     A,#<IOREGW 
   2143 6F            [ 4]   14         LD      L,A
   2144 7E            [ 7]   15         LD      A,(HL)
   2145 E1            [10]   16         POP     HL
   2146 CD 46 20      [17]   17         CALL    I2CDELAY
   2149 C9            [10]   18         RET
                             19     
                             20 ; Set the SCL pin low
                             21 ; D is the global output buffer
                             22 ; Destroys A
   214A                      23 CLRSCL:
   214A 7A            [ 4]   24         LD      A,D
   214B E6 1E         [ 7]   25         AND     0x1E
   214D 57            [ 4]   26         LD      D,A
   214E E5            [11]   27         PUSH    HL
   214F 26 27         [ 7]   28         LD      H,#>IOREGW
   2151 C6 C0         [ 7]   29         ADD     A,#<IOREGW 
   2153 6F            [ 4]   30         LD      L,A
   2154 7E            [ 7]   31         LD      A,(HL)
   2155 E1            [10]   32         POP     HL
   2156 C9            [10]   33         RET
                             34 
                             35 ; Set the DOUT pin low
                             36 ; D is the global output buffer
                             37 ; Destroys A 
   2157                      38 SETSDA:
   2157 7A            [ 4]   39         LD      A,D
   2158 E6 1D         [ 7]   40         AND     0x1D
   215A 57            [ 4]   41         LD      D,A
   215B E5            [11]   42         PUSH    HL
   215C 26 27         [ 7]   43         LD      H,#>IOREGW
   215E C6 C0         [ 7]   44         ADD     A,#<IOREGW 
   2160 6F            [ 4]   45         LD      L,A
   2161 7E            [ 7]   46         LD      A,(HL)
   2162 E1            [10]   47         POP     HL
   2163 CD 46 20      [17]   48         CALL    I2CDELAY
   2166 C9            [10]   49         RET
                             50 
                             51 ; Set the DOUT pin high
                             52 ; D is the global output buffer
                             53 ; Destroys A  
   2167                      54 CLRSDA:
   2167 7A            [ 4]   55         LD      A,D
   2168 F6 02         [ 7]   56         OR      0x02
   216A 57            [ 4]   57         LD      D,A
   216B E5            [11]   58         PUSH    HL
   216C 26 27         [ 7]   59         LD      H,#>IOREGW
   216E C6 C0         [ 7]   60         ADD     A,#<IOREGW 
   2170 6F            [ 4]   61         LD      L,A
   2171 7E            [ 7]   62         LD      A,(HL)
   2172 E1            [10]   63         POP     HL
   2173 CD 46 20      [17]   64         CALL    I2CDELAY
   2176 C9            [10]   65         RET
                             66 
                             67 ; Read the DIN pin 
                             68 ; returns bit in carry flag    
   2177                      69 READSDA:
   2177 7A            [ 4]   70         LD      A,D
   2178 E5            [11]   71         PUSH    HL
   2179 26 27         [ 7]   72         LD      H,#>IOREGR
   217B C6 A0         [ 7]   73         ADD     A,#<IOREGR
   217D 6F            [ 4]   74         LD      L,A
   217E 7E            [ 7]   75         LD      A,(HL)
   217F E1            [10]   76         POP     HL
   2180 CB 3F         [ 8]   77         SRL     A           ;carry flag
   2182 C9            [10]   78         RET
                             83 
                             84 ;------- region2  -----------------------------------------------
                             85 
                             86         .bank   region2 (base=IOADD, size=IOEND-IOADD)
                             87         .area   region2 (ABS, BANK=region2)
                             88 
                             89         .include "../io/romio_table.asm"
                              1 
                              2 ; 
                              3 ; For Demon Debugger Hardware - Rev D 
                              4 ;
                              5 ; In earlier hardware designs, I tried to capture the address bus bits on a 
                              6 ; read cycle, to use to write to the Arduino.  But it turns out it is impossible
                              7 ; to know exactly when to sample these address bits across all platforms, designs, and 
                              8 ; clock speeds
                              9 ;
                             10 ; The solution I came up with was to make sure the data bus contains the same information
                             11 ; as the lower address bus during these read cycles, so that I can sample the data bus just like the 
                             12 ; CPU would.
                             13 ;
                             14 ; This block of memory, starting at 0x07c0, is filled with consecutive integers.
                             15 ; When the CPU reads from a location, the data bus matches the lower bits of the address bus.  
                             16 ; And the data bus read by the CPU is also written to the Arduino.
                             17 ; 
                             18 ; Note: Currently, only the bottom two bits are used, but reserving the memory
                             19 ; this way insures that up to 5 bits could be used 
                             20 ; 
                             21         ; ROMIO READ Area - reserved
   27A0 FF FF FF FF FF FF    22         .DB     0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
        FF FF FF FF FF FF
        FF FF FF FF
   27B0 FF FF FF FF FF FF    23         .DB     0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
        FF FF FF FF FF FF
        FF FF FF FF
                             24 
                             25         ; ROMIO WRITE Area - data is used
   27C0 00 01 02 03 04 05    26         .DB     0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
        06 07 08 09 0A 0B
        0C 0D 0E 0F
   27D0 10 11 12 13 14 15    27         .DB     0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f
        16 17 18 19 1A 1B
        1C 1D 1E 1F
                             28 
                             90 
                             91 ;------- region3  -----------------------------------------------
                             92 
                             93         .bank   region3 (base=IOEND, size=ROMEND-IOEND)
                             94         .area   region3 (ABS, BANK=region3)
                             95 
                             96 
