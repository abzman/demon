
ROM-based I/O interface for Demon Debugger!

As the type of targets expand beyond Arcade PCBs, it becomes more
difficult to identify I/O pins to use for communication on the target.

Since we are generally replacing code with a EPROM containing the target code,
why not make an interface that looks like part of the EPROM space?

Here is the general idea:

1) Demon Debugger code easily fits into 512 bytes for all targets
2) A 2716-style 2K ROM interface is generic enough to be adapted for most targets
3) Sometimes we need code at the front of memory (ex. Z80 startup, NMI handler, etc.) and
   sometimes the end of memory (ex. 6502 reset vector)
4) So, we use a 2K memory space, but put a "hole" in the middle for I/O

Memory Map for I/O interface:

2K Total Memory Space:

0x000 - 0x79F:  "Front" ROM Space      - pass thru to our EPROM
0x7A0 - 0x7BF:  Special I/O READ area  - D0 reads from the Arduino
0x7C0 - 0x7DF:  Special I/O WRITE area - D1/D0 write to the Arduino
0x7E0 - 0x7ff:  "Back" ROM Space       - pass thru to our EPROM

I/O Reads are easy, skip the EPROM and just read from the Arduino pin

I/O Writes are a little trickier, we fill the EPROM region with D1/D0
matching A1/A0, and then we read from the eprom while writing to the Arduino
with D1/D0 at the same time.  To be clear, the CPU reads from the EPROM, 
but the data on the bus also gets written to the Arduino.




